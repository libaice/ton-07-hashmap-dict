#include "imports/stdlib.fc";

cell load_data() {
    cell data = get_data();
    slice ds = data.begin_parse();
    if (ds.slice_bits() == 0) {
        return new_dict();
    } else {
        return data;
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    cell data = get_data();
    slice ds = data.begin_parse();
    cell dic = ds.slice_bits() == 0 ? new_dict() : data;
    if (op == 1) {
        int key = in_msg_body~load_uint(256);
        dic~udict_set(256, key, in_msg_body);
        set_data(dic);
        return ();
    } elseif (op == 2) {
        int key = -1;
        do {
            (key, slice cs, int f) = dic.udict_get_next?(256, key);
            if (f) {
                int valid_until = cs~load_uint(64);
                if (valid_until < now()) {
                    ;;delete from the dict
                    dic~udict_delete?(256, key);
                }
            }
        } until (~ f);
    }

    if (dic.dict_empty?()) {
        ;; set a null dict in here
        set_data(begin_cell().end_cell());
    } else {
        set_data(dic);
    }

    throw(1001);
}

(int, slice) get_key(int key) method_id {
    cell dic = load_data();
    (slice payload, int success) = dic.udict_get?(256, key);
    throw_unless(98, success);

    int valid_until = payload~load_uint(64);
    return (valid_until, payload);
}